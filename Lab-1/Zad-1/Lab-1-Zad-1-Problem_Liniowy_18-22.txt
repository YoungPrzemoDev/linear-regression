import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from sklearn.metrics import r2_score
import statsmodels.api as sm

przychod = np.array([153, 272, 777, 1974, 3711, 5089, 7872, 12466, 17928, 27638, 40653]).reshape(-1, 1)
przychod_predict = np.array([55838, 70697, 85965, 117929, 116609]).reshape(-1, 1)
dane_treningowe_zatrudenienia = np.array([450, 850, 1218, 2127, 3200, 4619, 6337, 9199, 12691, 17048, 25105])
dane_testowe_zatrudnienie = np.array([35587, 44942, 58604, 71970, 86482])

# Model regresji liniowej
przychod_const = sm.add_constant(przychod)
model_linear = sm.OLS(dane_treningowe_zatrudenienia, przychod_const).fit()

# Przedział ufności dla prognoz
przychod_predict_const = sm.add_constant(przychod_predict)
predykcje_interval = model_linear.get_prediction(przychod_predict_const).conf_int()

# Wykresy danych, prognoz i przedziału ufności
plt.figure(figsize=(12, 6))
plt.scatter(przychod, dane_treningowe_zatrudenienia, color='b', label='Dane rzeczywiste')
plt.scatter(przychod_predict, dane_testowe_zatrudnienie, color='red', label='Dane testowe')
plt.plot(przychod, model_linear.predict(przychod_const), color='r', label='Regresja liniowa')
plt.plot(przychod_predict, model_linear.predict(przychod_predict_const), color='g', linestyle='--', label='Prognozy liniowe')

# Dodaj przedział ufności
plt.fill_between(przychod_predict.flatten(), predykcje_interval[:, 0], predykcje_interval[:, 1], color='green', alpha=0.2, label='Przedział ufności')

plt.title('Regresja liniowa z przedziałem ufności')
plt.xlabel('przychod')
plt.ylabel('zatrudnienie')
plt.legend()
plt.show()

# Inicjalizacja modelu liniowego (Scikit-learn)
model_linear_sklearn = LinearRegression()

# Dopasowanie modelu liniowego do danych treningowych (Scikit-learn)
model_linear_sklearn.fit(przychod, dane_treningowe_zatrudenienia)

# Obliczenie predykcji dla modelu liniowego (Scikit-learn)
prognozy_linear_sklearn = model_linear_sklearn.predict(przychod)

# Obliczenia dla modelu regresji liniowej (Scikit-learn)
r_squared_linear_sklearn = r2_score(dane_treningowe_zatrudenienia, prognozy_linear_sklearn)
mse_linear_sklearn = mean_squared_error(dane_treningowe_zatrudenienia, prognozy_linear_sklearn)
rmse_linear_sklearn = np.sqrt(mse_linear_sklearn)

# Prognozy modelu regresji liniowej na następne kwartały (Scikit-learn)
nastepne_kwartaly = np.arange(37, 57).reshape(-1, 1)
prognozy_linear_testowe_sklearn = model_linear_sklearn.predict(przychod_predict)

# Obliczenia dla modelu regresji liniowej na danych testowych (Scikit-learn)
r_squared_testowe_sklearn = r2_score(dane_testowe_zatrudnienie, prognozy_linear_testowe_sklearn)
rmse_testowe_sklearn = np.sqrt(mean_squared_error(dane_testowe_zatrudnienie, prognozy_linear_testowe_sklearn))

# Obliczenia dla reszt (Scikit-learn)
reszty_sklearn = dane_treningowe_zatrudenienia - prognozy_linear_sklearn
std_reszt_sklearn = np.std(reszty_sklearn)
min_reszt_sklearn = np.min(reszty_sklearn)
max_reszt_sklearn = np.max(reszty_sklearn)

# Wyświetl wyniki (Scikit-learn)
print("Współczynniki regresji liniowej (Scikit-learn):", model_linear_sklearn.coef_)
print("Intercept (Scikit-learn):", model_linear_sklearn.intercept_)
print("R-squared (Scikit-learn):", r_squared_linear_sklearn)
print("RMSE (Scikit-learn):", rmse_linear_sklearn)
print("R-squared dla danych testowych (Scikit-learn):", r_squared_testowe_sklearn)
print("RMSE dla danych testowych (Scikit-learn):", rmse_testowe_sklearn)
print("Odchylenie standardowe reszt (Scikit-learn):", std_reszt_sklearn)
print("Minimum reszt (Scikit-learn):", min_reszt_sklearn)
print("Maksimum reszt (Scikit-learn):", max_reszt_sklearn)