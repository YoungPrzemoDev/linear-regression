import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import math
from sklearn.metrics import r2_score
import statsmodels.api as sm

# Kolejne kwartały i odpowiadające im wartości
kwartaly = np.arange(1, 37).reshape(-1, 1)
kwartaly_predict = np.arange(37, 49).reshape(-1, 1)
dane_treningowe_uzytkownicy = np.array([197, 242, 305, 360, 431, 482, 550, 608, 680, 739, 800, 845, 901, 955, 1007, 1056, 1110, 1155, 1189, 1228, 1276, 1317, 1350, 1393, 1441, 1490, 1545, 1591, 1654, 1712, 1788, 1860, 1936, 2006, 2072, 2129])

dane_testowe_uzytkownicy = np.array([2196, 2234, 2271, 2320, 2375, 2414, 2449, 2498, 2603, 2701, 2740, 2797])




# Model regresji wielomianowej 2. stopnia
poly_features_2 = PolynomialFeatures(degree=2)
kwartal_poly2 = poly_features_2.fit_transform(kwartaly)
model_poly2 = sm.OLS(dane_treningowe_uzytkownicy, kwartal_poly2).fit()

# Przygotuj dane testowe z cechami wielomianowymi (2. stopień)
nastepne_kwartaly_poly2 = poly_features_2.transform(kwartaly_predict)

# Przedział ufności dla prognoz wielomianowych 2. stopnia
predykcje_interval_poly2 = model_poly2.get_prediction(nastepne_kwartaly_poly2).conf_int()

prognozy_poly2 = model_poly2.predict(nastepne_kwartaly_poly2)

# Wykresy danych, prognoz i przedziału ufności (2. stopień)
plt.figure(figsize=(12, 6))
plt.scatter(kwartaly, dane_treningowe_uzytkownicy, color='b', label='Dane rzeczywiste')
plt.scatter(kwartaly_predict, dane_testowe_uzytkownicy, color='red', label='Dane testowe')
plt.plot(kwartaly, model_poly2.predict(kwartal_poly2), color='r', label='Regresja wielomianowa (stopień 2)')
plt.plot(kwartaly_predict, prognozy_poly2, color='g', linestyle='--', label='Prognozy wielomianowe (stopień 2)')
plt.fill_between(kwartaly_predict.flatten(), predykcje_interval_poly2[:, 0], predykcje_interval_poly2[:, 1], color='green', alpha=0.2, label='Przedział ufności')

plt.title('Regresja wielomianowa (stopień 2) z przedziałem ufności')
plt.xlabel('przychod')
plt.ylabel('zatrudnienie')
plt.legend()
plt.show()

# Obliczenia dla modelu wielomianowego 2. stopnia
coefficients_poly2 = model_poly2.params
intercept_poly2 = model_poly2.params[0]

r_squared_poly2_train = r2_score(dane_treningowe_uzytkownicy, model_poly2.predict(kwartal_poly2))
rmse_poly2_train = np.sqrt(mean_squared_error(dane_treningowe_uzytkownicy, model_poly2.predict(kwartal_poly2)))

przychod_predict_poly2 = poly_features_2.transform(kwartaly_predict)
prognozy_poly2_test = model_poly2.predict(przychod_predict_poly2)

r_squared_poly2_test = r2_score(dane_testowe_uzytkownicy, prognozy_poly2_test)
rmse_poly2_test = np.sqrt(mean_squared_error(dane_testowe_uzytkownicy, prognozy_poly2_test))

# Obliczenia dla reszt dla modelu wielomianowego stopnia 2
reszty_poly2 = dane_treningowe_uzytkownicy - model_poly2.predict(kwartal_poly2)
std_reszt_poly2 = np.std(reszty_poly2)
min_reszt_poly2 = np.min(reszty_poly2)
max_reszt_poly2 = np.max(reszty_poly2)

# Wypisz wyniki
print("Współczynniki modelu wielomianowego 2. stopnia:")
print("Intercept:", intercept_poly2)
print("R-squared (treningowe, stopień 2):", r_squared_poly2_train)
print("RMSE (treningowe, stopień 2):", rmse_poly2_train)
print("R-squared (testowe, stopień 2):", r_squared_poly2_test)
print("RMSE (testowe, stopień 2):", rmse_poly2_test)
print("Współczynniki regresji wielomianowej (stopień 2):", model_poly2.params)
print("Odchylenie standardowe reszt (stopień 2):", std_reszt_poly2)
print("Minimum reszt (stopień 2):", min_reszt_poly2)
print("Maksimum reszt (stopień 2):", max_reszt_poly2)
